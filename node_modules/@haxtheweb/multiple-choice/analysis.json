{
  "schema_version": "1.0.0",
  "elements": [
    {
      "description": "",
      "summary": "",
      "path": "lib/confetti-container.js",
      "properties": [],
      "methods": [
        {
          "name": "connectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 122,
              "column": 4
            },
            "end": {
              "line": 134,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "attributeChangedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 140,
              "column": 4
            },
            "end": {
              "line": 150,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "name"
            },
            {
              "name": "oldValue"
            },
            {
              "name": "newValue"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "popConfetti",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 152,
              "column": 4
            },
            "end": {
              "line": 161,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "render",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 163,
              "column": 4
            },
            "end": {
              "line": 223,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 103,
          "column": 2
        },
        "end": {
          "line": 224,
          "column": 3
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "Confetti",
      "attributes": [
        {
          "name": "popped",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 137,
              "column": 14
            },
            "end": {
              "line": 137,
              "column": 22
            }
          },
          "metadata": {}
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "confetti-container"
    }
  ],
  "classes": [
    {
      "description": "",
      "summary": "",
      "path": "lib/QuestionElement.js",
      "properties": [],
      "methods": [
        {
          "name": "updated",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 45,
              "column": 2
            },
            "end": {
              "line": 102,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "changedProperties"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "getGuess",
          "description": "return array of all guesses",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 104,
              "column": 2
            },
            "end": {
              "line": 112,
              "column": 3
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "guessCount",
          "description": "count of all guesses",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 114,
              "column": 2
            },
            "end": {
              "line": 116,
              "column": 3
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "checkedEvent",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 118,
              "column": 2
            },
            "end": {
              "line": 122,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "resetAnswer",
          "description": "Reset user answers and shuffle the board again.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 127,
              "column": 2
            },
            "end": {
              "line": 143,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "isCorrect",
          "description": "Return if the current answers are correct",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 148,
              "column": 2
            },
            "end": {
              "line": 171,
              "column": 3
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "makeItRain",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 173,
              "column": 2
            },
            "end": {
              "line": 179,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "checkAnswer",
          "description": "Verify the answers of the user based on their saying\nthat they want to see how they did.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 184,
              "column": 2
            },
            "end": {
              "line": 192,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "checkAnswerCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 194,
              "column": 2
            },
            "end": {
              "line": 268,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_computeDisplayedAnswers",
          "description": "Figure out the order of the answers which will be displayed",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 273,
              "column": 2
            },
            "end": {
              "line": 301,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "answers"
            },
            {
              "name": "randomize"
            }
          ]
        },
        {
          "name": "playSound",
          "description": "fire event about wanting to play a sound",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 684,
              "column": 2
            },
            "end": {
              "line": 692,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "sound"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "haxpreProcessNodeToContent",
          "description": "HAX preprocess Node to Content hook",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 697,
              "column": 2
            },
            "end": {
              "line": 741,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node"
            }
          ]
        },
        {
          "name": "haxpreProcessInsertContent",
          "description": "HAX preprocess insert content hook",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 746,
              "column": 2
            },
            "end": {
              "line": 761,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "detail"
            },
            {
              "name": "activeNode"
            }
          ]
        },
        {
          "name": "firstUpdated",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 762,
              "column": 2
            },
            "end": {
              "line": 770,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "changedProperties"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "render",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 772,
              "column": 2
            },
            "end": {
              "line": 854,
              "column": 3
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "renderInteraction",
          "description": "our default implementation is a multiple-choice element",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 858,
              "column": 2
            },
            "end": {
              "line": 883,
              "column": 3
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "inactiveCase",
          "description": "the case for whether or not this is inactive based on user input",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 885,
              "column": 2
            },
            "end": {
              "line": 887,
              "column": 3
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "renderButtons",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 889,
              "column": 2
            },
            "end": {
              "line": 912,
              "column": 3
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "renderDirections",
          "description": "this manages the directions that are rendered and hard coded for the interaction",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 915,
              "column": 2
            },
            "end": {
              "line": 921,
              "column": 3
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "renderLegend",
          "description": "legend so user understands color relation to correctness",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 924,
              "column": 2
            },
            "end": {
              "line": 931,
              "column": 3
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "renderFeedback",
          "description": "this manages the output of the feedback area",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 934,
              "column": 2
            },
            "end": {
              "line": 981,
              "column": 3
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "clickSingle",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 983,
              "column": 2
            },
            "end": {
              "line": 1053,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "cleanAnswerData",
          "description": "ensure data model of the answers is normalized",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 1055,
              "column": 2
            },
            "end": {
              "line": 1067,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "answers"
            }
          ]
        },
        {
          "name": "cleanAnswerDataBeforeSend",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 1069,
              "column": 2
            },
            "end": {
              "line": 1072,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "answer"
            },
            {
              "name": "index"
            },
            {
              "name": "answers"
            }
          ]
        },
        {
          "name": "answerPrototype",
          "description": "things like order which is calculated",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 1076,
              "column": 2
            },
            "end": {
              "line": 1086,
              "column": 3
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "processInput",
          "description": "convert the input to data",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 1088,
              "column": 2
            },
            "end": {
              "line": 1099,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "index"
            },
            {
              "name": "inputs"
            },
            {
              "name": "answers"
            }
          ]
        },
        {
          "name": "loadLightDomData",
          "description": "this also makes it a lot more portable / readable and have better SEO (in theory)",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 1102,
              "column": 2
            },
            "end": {
              "line": 1118,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "haxactiveElementChanged",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 1120,
              "column": 2
            },
            "end": {
              "line": 1124,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "element"
            },
            {
              "name": "value"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "haxeditModeChanged",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 1126,
              "column": 2
            },
            "end": {
              "line": 1128,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "renderEditModeFeedbackAreas",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 1130,
              "column": 2
            },
            "end": {
              "line": 1151,
              "column": 3
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "haxHooks",
          "description": "Implements haxHooks to tie into life-cycle if hax exists.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 1156,
              "column": 2
            },
            "end": {
              "line": 1164,
              "column": 3
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "haxinlineContextMenu",
          "description": "add buttons when it is in context",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 1169,
              "column": 2
            },
            "end": {
              "line": 1177,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "ceMenu"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "haxToggleEdit",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 1178,
              "column": 2
            },
            "end": {
              "line": 1181,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 12,
          "column": 7
        },
        "end": {
          "line": 1182,
          "column": 1
        }
      },
      "privacy": "public",
      "name": "QuestionElement"
    },
    {
      "description": "`multiple-choice`\n`Ask the user a question from a set of possible answers.`",
      "summary": "",
      "path": "multiple-choice.js",
      "properties": [],
      "methods": [
        {
          "name": "updated",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "lib/QuestionElement.js",
            "start": {
              "line": 45,
              "column": 2
            },
            "end": {
              "line": 102,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "changedProperties"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "QuestionElement"
        },
        {
          "name": "getGuess",
          "description": "return array of all guesses",
          "privacy": "public",
          "sourceRange": {
            "file": "lib/QuestionElement.js",
            "start": {
              "line": 104,
              "column": 2
            },
            "end": {
              "line": 112,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "QuestionElement"
        },
        {
          "name": "guessCount",
          "description": "count of all guesses",
          "privacy": "public",
          "sourceRange": {
            "file": "lib/QuestionElement.js",
            "start": {
              "line": 114,
              "column": 2
            },
            "end": {
              "line": 116,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "QuestionElement"
        },
        {
          "name": "checkedEvent",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "lib/QuestionElement.js",
            "start": {
              "line": 118,
              "column": 2
            },
            "end": {
              "line": 122,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "QuestionElement"
        },
        {
          "name": "resetAnswer",
          "description": "Reset user answers and shuffle the board again.",
          "privacy": "public",
          "sourceRange": {
            "file": "lib/QuestionElement.js",
            "start": {
              "line": 127,
              "column": 2
            },
            "end": {
              "line": 143,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "QuestionElement"
        },
        {
          "name": "isCorrect",
          "description": "Return if the current answers are correct",
          "privacy": "public",
          "sourceRange": {
            "file": "lib/QuestionElement.js",
            "start": {
              "line": 148,
              "column": 2
            },
            "end": {
              "line": 171,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "QuestionElement"
        },
        {
          "name": "makeItRain",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "lib/QuestionElement.js",
            "start": {
              "line": 173,
              "column": 2
            },
            "end": {
              "line": 179,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "QuestionElement"
        },
        {
          "name": "checkAnswer",
          "description": "Verify the answers of the user based on their saying\nthat they want to see how they did.",
          "privacy": "public",
          "sourceRange": {
            "file": "lib/QuestionElement.js",
            "start": {
              "line": 184,
              "column": 2
            },
            "end": {
              "line": 192,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "QuestionElement"
        },
        {
          "name": "checkAnswerCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "lib/QuestionElement.js",
            "start": {
              "line": 194,
              "column": 2
            },
            "end": {
              "line": 268,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "QuestionElement"
        },
        {
          "name": "_computeDisplayedAnswers",
          "description": "Figure out the order of the answers which will be displayed",
          "privacy": "protected",
          "sourceRange": {
            "file": "lib/QuestionElement.js",
            "start": {
              "line": 273,
              "column": 2
            },
            "end": {
              "line": 301,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "answers"
            },
            {
              "name": "randomize"
            }
          ],
          "inheritedFrom": "QuestionElement"
        },
        {
          "name": "playSound",
          "description": "fire event about wanting to play a sound",
          "privacy": "public",
          "sourceRange": {
            "file": "lib/QuestionElement.js",
            "start": {
              "line": 684,
              "column": 2
            },
            "end": {
              "line": 692,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "sound"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "QuestionElement"
        },
        {
          "name": "haxpreProcessNodeToContent",
          "description": "HAX preprocess Node to Content hook",
          "privacy": "public",
          "sourceRange": {
            "file": "lib/QuestionElement.js",
            "start": {
              "line": 697,
              "column": 2
            },
            "end": {
              "line": 741,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node"
            }
          ],
          "inheritedFrom": "QuestionElement"
        },
        {
          "name": "haxpreProcessInsertContent",
          "description": "HAX preprocess insert content hook",
          "privacy": "public",
          "sourceRange": {
            "file": "lib/QuestionElement.js",
            "start": {
              "line": 746,
              "column": 2
            },
            "end": {
              "line": 761,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "detail"
            },
            {
              "name": "activeNode"
            }
          ],
          "inheritedFrom": "QuestionElement"
        },
        {
          "name": "firstUpdated",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "lib/QuestionElement.js",
            "start": {
              "line": 762,
              "column": 2
            },
            "end": {
              "line": 770,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "changedProperties"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "QuestionElement"
        },
        {
          "name": "render",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "lib/QuestionElement.js",
            "start": {
              "line": 772,
              "column": 2
            },
            "end": {
              "line": 854,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "QuestionElement"
        },
        {
          "name": "renderInteraction",
          "description": "our default implementation is a multiple-choice element",
          "privacy": "public",
          "sourceRange": {
            "file": "lib/QuestionElement.js",
            "start": {
              "line": 858,
              "column": 2
            },
            "end": {
              "line": 883,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "QuestionElement"
        },
        {
          "name": "inactiveCase",
          "description": "the case for whether or not this is inactive based on user input",
          "privacy": "public",
          "sourceRange": {
            "file": "lib/QuestionElement.js",
            "start": {
              "line": 885,
              "column": 2
            },
            "end": {
              "line": 887,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "QuestionElement"
        },
        {
          "name": "renderButtons",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "lib/QuestionElement.js",
            "start": {
              "line": 889,
              "column": 2
            },
            "end": {
              "line": 912,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "QuestionElement"
        },
        {
          "name": "renderDirections",
          "description": "this manages the directions that are rendered and hard coded for the interaction",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 24,
              "column": 2
            },
            "end": {
              "line": 33,
              "column": 3
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "renderLegend",
          "description": "legend so user understands color relation to correctness",
          "privacy": "public",
          "sourceRange": {
            "file": "lib/QuestionElement.js",
            "start": {
              "line": 924,
              "column": 2
            },
            "end": {
              "line": 931,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "QuestionElement"
        },
        {
          "name": "renderFeedback",
          "description": "this manages the output of the feedback area",
          "privacy": "public",
          "sourceRange": {
            "file": "lib/QuestionElement.js",
            "start": {
              "line": 934,
              "column": 2
            },
            "end": {
              "line": 981,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "QuestionElement"
        },
        {
          "name": "clickSingle",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "lib/QuestionElement.js",
            "start": {
              "line": 983,
              "column": 2
            },
            "end": {
              "line": 1053,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "QuestionElement"
        },
        {
          "name": "cleanAnswerData",
          "description": "ensure data model of the answers is normalized",
          "privacy": "public",
          "sourceRange": {
            "file": "lib/QuestionElement.js",
            "start": {
              "line": 1055,
              "column": 2
            },
            "end": {
              "line": 1067,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "answers"
            }
          ],
          "inheritedFrom": "QuestionElement"
        },
        {
          "name": "cleanAnswerDataBeforeSend",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "lib/QuestionElement.js",
            "start": {
              "line": 1069,
              "column": 2
            },
            "end": {
              "line": 1072,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "answer"
            },
            {
              "name": "index"
            },
            {
              "name": "answers"
            }
          ],
          "inheritedFrom": "QuestionElement"
        },
        {
          "name": "answerPrototype",
          "description": "things like order which is calculated",
          "privacy": "public",
          "sourceRange": {
            "file": "lib/QuestionElement.js",
            "start": {
              "line": 1076,
              "column": 2
            },
            "end": {
              "line": 1086,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "QuestionElement"
        },
        {
          "name": "processInput",
          "description": "convert the input to data",
          "privacy": "public",
          "sourceRange": {
            "file": "lib/QuestionElement.js",
            "start": {
              "line": 1088,
              "column": 2
            },
            "end": {
              "line": 1099,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "index"
            },
            {
              "name": "inputs"
            },
            {
              "name": "answers"
            }
          ],
          "inheritedFrom": "QuestionElement"
        },
        {
          "name": "loadLightDomData",
          "description": "this also makes it a lot more portable / readable and have better SEO (in theory)",
          "privacy": "public",
          "sourceRange": {
            "file": "lib/QuestionElement.js",
            "start": {
              "line": 1102,
              "column": 2
            },
            "end": {
              "line": 1118,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "QuestionElement"
        },
        {
          "name": "haxactiveElementChanged",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "lib/QuestionElement.js",
            "start": {
              "line": 1120,
              "column": 2
            },
            "end": {
              "line": 1124,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "element"
            },
            {
              "name": "value"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "QuestionElement"
        },
        {
          "name": "haxeditModeChanged",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "lib/QuestionElement.js",
            "start": {
              "line": 1126,
              "column": 2
            },
            "end": {
              "line": 1128,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "QuestionElement"
        },
        {
          "name": "renderEditModeFeedbackAreas",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "lib/QuestionElement.js",
            "start": {
              "line": 1130,
              "column": 2
            },
            "end": {
              "line": 1151,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "QuestionElement"
        },
        {
          "name": "haxHooks",
          "description": "Implements haxHooks to tie into life-cycle if hax exists.",
          "privacy": "public",
          "sourceRange": {
            "file": "lib/QuestionElement.js",
            "start": {
              "line": 1156,
              "column": 2
            },
            "end": {
              "line": 1164,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "QuestionElement"
        },
        {
          "name": "haxinlineContextMenu",
          "description": "add buttons when it is in context",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 46,
              "column": 2
            },
            "end": {
              "line": 64,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "ceMenu"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "haxToggleEdit",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "lib/QuestionElement.js",
            "start": {
              "line": 1178,
              "column": 2
            },
            "end": {
              "line": 1181,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "inheritedFrom": "QuestionElement"
        },
        {
          "name": "haxClickInlineAdd",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 65,
              "column": 2
            },
            "end": {
              "line": 71,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ]
        },
        {
          "name": "haxClickInlineRemove",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 72,
              "column": 2
            },
            "end": {
              "line": 80,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/index.html",
          "description": ""
        },
        {
          "url": "demo/index.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 15,
          "column": 0
        },
        "end": {
          "line": 81,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "QuestionElement",
      "name": "MultipleChoice"
    },
    {
      "description": "`true-false-question`\n`Ask the user a question from a set of possible answers.`",
      "summary": "",
      "path": "lib/true-false-question.js",
      "properties": [],
      "methods": [
        {
          "name": "updated",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 32,
              "column": 2
            },
            "end": {
              "line": 55,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "changedProperties"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "getGuess",
          "description": "return array of all guesses",
          "privacy": "public",
          "sourceRange": {
            "file": "QuestionElement.js",
            "start": {
              "line": 104,
              "column": 2
            },
            "end": {
              "line": 112,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "QuestionElement"
        },
        {
          "name": "guessCount",
          "description": "count of all guesses",
          "privacy": "public",
          "sourceRange": {
            "file": "QuestionElement.js",
            "start": {
              "line": 114,
              "column": 2
            },
            "end": {
              "line": 116,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "QuestionElement"
        },
        {
          "name": "checkedEvent",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "QuestionElement.js",
            "start": {
              "line": 118,
              "column": 2
            },
            "end": {
              "line": 122,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "QuestionElement"
        },
        {
          "name": "resetAnswer",
          "description": "Reset user answers and shuffle the board again.",
          "privacy": "public",
          "sourceRange": {
            "file": "QuestionElement.js",
            "start": {
              "line": 127,
              "column": 2
            },
            "end": {
              "line": 143,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "QuestionElement"
        },
        {
          "name": "isCorrect",
          "description": "Return if the current answers are correct",
          "privacy": "public",
          "sourceRange": {
            "file": "QuestionElement.js",
            "start": {
              "line": 148,
              "column": 2
            },
            "end": {
              "line": 171,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "QuestionElement"
        },
        {
          "name": "makeItRain",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "QuestionElement.js",
            "start": {
              "line": 173,
              "column": 2
            },
            "end": {
              "line": 179,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "QuestionElement"
        },
        {
          "name": "checkAnswer",
          "description": "Verify the answers of the user based on their saying\nthat they want to see how they did.",
          "privacy": "public",
          "sourceRange": {
            "file": "QuestionElement.js",
            "start": {
              "line": 184,
              "column": 2
            },
            "end": {
              "line": 192,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "QuestionElement"
        },
        {
          "name": "checkAnswerCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "QuestionElement.js",
            "start": {
              "line": 194,
              "column": 2
            },
            "end": {
              "line": 268,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "QuestionElement"
        },
        {
          "name": "_computeDisplayedAnswers",
          "description": "Figure out the order of the answers which will be displayed",
          "privacy": "protected",
          "sourceRange": {
            "file": "QuestionElement.js",
            "start": {
              "line": 273,
              "column": 2
            },
            "end": {
              "line": 301,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "answers"
            },
            {
              "name": "randomize"
            }
          ],
          "inheritedFrom": "QuestionElement"
        },
        {
          "name": "playSound",
          "description": "fire event about wanting to play a sound",
          "privacy": "public",
          "sourceRange": {
            "file": "QuestionElement.js",
            "start": {
              "line": 684,
              "column": 2
            },
            "end": {
              "line": 692,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "sound"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "QuestionElement"
        },
        {
          "name": "haxpreProcessNodeToContent",
          "description": "HAX preprocess Node to Content hook",
          "privacy": "public",
          "sourceRange": {
            "file": "QuestionElement.js",
            "start": {
              "line": 697,
              "column": 2
            },
            "end": {
              "line": 741,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node"
            }
          ],
          "inheritedFrom": "QuestionElement"
        },
        {
          "name": "haxpreProcessInsertContent",
          "description": "HAX preprocess insert content hook",
          "privacy": "public",
          "sourceRange": {
            "file": "QuestionElement.js",
            "start": {
              "line": 746,
              "column": 2
            },
            "end": {
              "line": 761,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "detail"
            },
            {
              "name": "activeNode"
            }
          ],
          "inheritedFrom": "QuestionElement"
        },
        {
          "name": "firstUpdated",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "QuestionElement.js",
            "start": {
              "line": 762,
              "column": 2
            },
            "end": {
              "line": 770,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "changedProperties"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "QuestionElement"
        },
        {
          "name": "render",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "QuestionElement.js",
            "start": {
              "line": 772,
              "column": 2
            },
            "end": {
              "line": 854,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "QuestionElement"
        },
        {
          "name": "renderInteraction",
          "description": "our default implementation is a multiple-choice element",
          "privacy": "public",
          "sourceRange": {
            "file": "QuestionElement.js",
            "start": {
              "line": 858,
              "column": 2
            },
            "end": {
              "line": 883,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "QuestionElement"
        },
        {
          "name": "inactiveCase",
          "description": "the case for whether or not this is inactive based on user input",
          "privacy": "public",
          "sourceRange": {
            "file": "QuestionElement.js",
            "start": {
              "line": 885,
              "column": 2
            },
            "end": {
              "line": 887,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "QuestionElement"
        },
        {
          "name": "renderButtons",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "QuestionElement.js",
            "start": {
              "line": 889,
              "column": 2
            },
            "end": {
              "line": 912,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "QuestionElement"
        },
        {
          "name": "renderDirections",
          "description": "this manages the directions that are rendered and hard coded for the interaction",
          "privacy": "public",
          "sourceRange": {
            "file": "QuestionElement.js",
            "start": {
              "line": 915,
              "column": 2
            },
            "end": {
              "line": 921,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "QuestionElement"
        },
        {
          "name": "renderLegend",
          "description": "legend so user understands color relation to correctness",
          "privacy": "public",
          "sourceRange": {
            "file": "QuestionElement.js",
            "start": {
              "line": 924,
              "column": 2
            },
            "end": {
              "line": 931,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "QuestionElement"
        },
        {
          "name": "renderFeedback",
          "description": "this manages the output of the feedback area",
          "privacy": "public",
          "sourceRange": {
            "file": "QuestionElement.js",
            "start": {
              "line": 934,
              "column": 2
            },
            "end": {
              "line": 981,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "QuestionElement"
        },
        {
          "name": "clickSingle",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "QuestionElement.js",
            "start": {
              "line": 983,
              "column": 2
            },
            "end": {
              "line": 1053,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "QuestionElement"
        },
        {
          "name": "cleanAnswerData",
          "description": "ensure data model of the answers is normalized",
          "privacy": "public",
          "sourceRange": {
            "file": "QuestionElement.js",
            "start": {
              "line": 1055,
              "column": 2
            },
            "end": {
              "line": 1067,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "answers"
            }
          ],
          "inheritedFrom": "QuestionElement"
        },
        {
          "name": "cleanAnswerDataBeforeSend",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "QuestionElement.js",
            "start": {
              "line": 1069,
              "column": 2
            },
            "end": {
              "line": 1072,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "answer"
            },
            {
              "name": "index"
            },
            {
              "name": "answers"
            }
          ],
          "inheritedFrom": "QuestionElement"
        },
        {
          "name": "answerPrototype",
          "description": "things like order which is calculated",
          "privacy": "public",
          "sourceRange": {
            "file": "QuestionElement.js",
            "start": {
              "line": 1076,
              "column": 2
            },
            "end": {
              "line": 1086,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "QuestionElement"
        },
        {
          "name": "processInput",
          "description": "convert the input to data",
          "privacy": "public",
          "sourceRange": {
            "file": "QuestionElement.js",
            "start": {
              "line": 1088,
              "column": 2
            },
            "end": {
              "line": 1099,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "index"
            },
            {
              "name": "inputs"
            },
            {
              "name": "answers"
            }
          ],
          "inheritedFrom": "QuestionElement"
        },
        {
          "name": "loadLightDomData",
          "description": "this also makes it a lot more portable / readable and have better SEO (in theory)",
          "privacy": "public",
          "sourceRange": {
            "file": "QuestionElement.js",
            "start": {
              "line": 1102,
              "column": 2
            },
            "end": {
              "line": 1118,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "QuestionElement"
        },
        {
          "name": "haxactiveElementChanged",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "QuestionElement.js",
            "start": {
              "line": 1120,
              "column": 2
            },
            "end": {
              "line": 1124,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "element"
            },
            {
              "name": "value"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "QuestionElement"
        },
        {
          "name": "haxeditModeChanged",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "QuestionElement.js",
            "start": {
              "line": 1126,
              "column": 2
            },
            "end": {
              "line": 1128,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "QuestionElement"
        },
        {
          "name": "renderEditModeFeedbackAreas",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "QuestionElement.js",
            "start": {
              "line": 1130,
              "column": 2
            },
            "end": {
              "line": 1151,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "QuestionElement"
        },
        {
          "name": "haxHooks",
          "description": "Implements haxHooks to tie into life-cycle if hax exists.",
          "privacy": "public",
          "sourceRange": {
            "file": "QuestionElement.js",
            "start": {
              "line": 1156,
              "column": 2
            },
            "end": {
              "line": 1164,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "QuestionElement"
        },
        {
          "name": "haxinlineContextMenu",
          "description": "add buttons when it is in context",
          "privacy": "public",
          "sourceRange": {
            "file": "QuestionElement.js",
            "start": {
              "line": 1169,
              "column": 2
            },
            "end": {
              "line": 1177,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "ceMenu"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "QuestionElement"
        },
        {
          "name": "haxToggleEdit",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "QuestionElement.js",
            "start": {
              "line": 1178,
              "column": 2
            },
            "end": {
              "line": 1181,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "inheritedFrom": "QuestionElement"
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/index.html",
          "description": ""
        },
        {
          "url": "demo/index.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 7,
          "column": 0
        },
        "end": {
          "line": 56,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "QuestionElement",
      "name": "TrueFalseQuestion"
    },
    {
      "description": "`short-answer-question`\n`Ask the user a question from a set of possible answers.`",
      "summary": "",
      "path": "lib/short-answer-question.js",
      "properties": [],
      "methods": [
        {
          "name": "updated",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "QuestionElement.js",
            "start": {
              "line": 45,
              "column": 2
            },
            "end": {
              "line": 102,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "changedProperties"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "QuestionElement"
        },
        {
          "name": "getGuess",
          "description": "return array of all guesses",
          "privacy": "public",
          "sourceRange": {
            "file": "QuestionElement.js",
            "start": {
              "line": 104,
              "column": 2
            },
            "end": {
              "line": 112,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "QuestionElement"
        },
        {
          "name": "guessCount",
          "description": "count of all guesses",
          "privacy": "public",
          "sourceRange": {
            "file": "QuestionElement.js",
            "start": {
              "line": 114,
              "column": 2
            },
            "end": {
              "line": 116,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "QuestionElement"
        },
        {
          "name": "checkedEvent",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "QuestionElement.js",
            "start": {
              "line": 118,
              "column": 2
            },
            "end": {
              "line": 122,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "QuestionElement"
        },
        {
          "name": "resetAnswer",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 69,
              "column": 2
            },
            "end": {
              "line": 80,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "isCorrect",
          "description": "Return if the current answers are correct",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 89,
              "column": 2
            },
            "end": {
              "line": 99,
              "column": 3
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "makeItRain",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "QuestionElement.js",
            "start": {
              "line": 173,
              "column": 2
            },
            "end": {
              "line": 179,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "QuestionElement"
        },
        {
          "name": "checkAnswer",
          "description": "Verify the answers of the user based on their saying\nthat they want to see how they did.",
          "privacy": "public",
          "sourceRange": {
            "file": "QuestionElement.js",
            "start": {
              "line": 184,
              "column": 2
            },
            "end": {
              "line": 192,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "QuestionElement"
        },
        {
          "name": "checkAnswerCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "QuestionElement.js",
            "start": {
              "line": 194,
              "column": 2
            },
            "end": {
              "line": 268,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "QuestionElement"
        },
        {
          "name": "_computeDisplayedAnswers",
          "description": "Figure out the order of the answers which will be displayed",
          "privacy": "protected",
          "sourceRange": {
            "file": "QuestionElement.js",
            "start": {
              "line": 273,
              "column": 2
            },
            "end": {
              "line": 301,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "answers"
            },
            {
              "name": "randomize"
            }
          ],
          "inheritedFrom": "QuestionElement"
        },
        {
          "name": "playSound",
          "description": "fire event about wanting to play a sound",
          "privacy": "public",
          "sourceRange": {
            "file": "QuestionElement.js",
            "start": {
              "line": 684,
              "column": 2
            },
            "end": {
              "line": 692,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "sound"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "QuestionElement"
        },
        {
          "name": "haxpreProcessNodeToContent",
          "description": "HAX preprocess Node to Content hook",
          "privacy": "public",
          "sourceRange": {
            "file": "QuestionElement.js",
            "start": {
              "line": 697,
              "column": 2
            },
            "end": {
              "line": 741,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node"
            }
          ],
          "inheritedFrom": "QuestionElement"
        },
        {
          "name": "haxpreProcessInsertContent",
          "description": "HAX preprocess insert content hook",
          "privacy": "public",
          "sourceRange": {
            "file": "QuestionElement.js",
            "start": {
              "line": 746,
              "column": 2
            },
            "end": {
              "line": 761,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "detail"
            },
            {
              "name": "activeNode"
            }
          ],
          "inheritedFrom": "QuestionElement"
        },
        {
          "name": "firstUpdated",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "QuestionElement.js",
            "start": {
              "line": 762,
              "column": 2
            },
            "end": {
              "line": 770,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "changedProperties"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "QuestionElement"
        },
        {
          "name": "render",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "QuestionElement.js",
            "start": {
              "line": 772,
              "column": 2
            },
            "end": {
              "line": 854,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "QuestionElement"
        },
        {
          "name": "renderInteraction",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 46,
              "column": 2
            },
            "end": {
              "line": 67,
              "column": 3
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "inactiveCase",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 34,
              "column": 2
            },
            "end": {
              "line": 36,
              "column": 3
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "renderButtons",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "QuestionElement.js",
            "start": {
              "line": 889,
              "column": 2
            },
            "end": {
              "line": 912,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "QuestionElement"
        },
        {
          "name": "renderDirections",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 38,
              "column": 2
            },
            "end": {
              "line": 44,
              "column": 3
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "renderLegend",
          "description": "legend so user understands color relation to correctness",
          "privacy": "public",
          "sourceRange": {
            "file": "QuestionElement.js",
            "start": {
              "line": 924,
              "column": 2
            },
            "end": {
              "line": 931,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "QuestionElement"
        },
        {
          "name": "renderFeedback",
          "description": "this manages the output of the feedback area",
          "privacy": "public",
          "sourceRange": {
            "file": "QuestionElement.js",
            "start": {
              "line": 934,
              "column": 2
            },
            "end": {
              "line": 981,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "QuestionElement"
        },
        {
          "name": "clickSingle",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "QuestionElement.js",
            "start": {
              "line": 983,
              "column": 2
            },
            "end": {
              "line": 1053,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "QuestionElement"
        },
        {
          "name": "cleanAnswerData",
          "description": "ensure data model of the answers is normalized",
          "privacy": "public",
          "sourceRange": {
            "file": "QuestionElement.js",
            "start": {
              "line": 1055,
              "column": 2
            },
            "end": {
              "line": 1067,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "answers"
            }
          ],
          "inheritedFrom": "QuestionElement"
        },
        {
          "name": "cleanAnswerDataBeforeSend",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "QuestionElement.js",
            "start": {
              "line": 1069,
              "column": 2
            },
            "end": {
              "line": 1072,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "answer"
            },
            {
              "name": "index"
            },
            {
              "name": "answers"
            }
          ],
          "inheritedFrom": "QuestionElement"
        },
        {
          "name": "answerPrototype",
          "description": "things like order which is calculated",
          "privacy": "public",
          "sourceRange": {
            "file": "QuestionElement.js",
            "start": {
              "line": 1076,
              "column": 2
            },
            "end": {
              "line": 1086,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "QuestionElement"
        },
        {
          "name": "processInput",
          "description": "convert the input to data",
          "privacy": "public",
          "sourceRange": {
            "file": "QuestionElement.js",
            "start": {
              "line": 1088,
              "column": 2
            },
            "end": {
              "line": 1099,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "index"
            },
            {
              "name": "inputs"
            },
            {
              "name": "answers"
            }
          ],
          "inheritedFrom": "QuestionElement"
        },
        {
          "name": "loadLightDomData",
          "description": "this also makes it a lot more portable / readable and have better SEO (in theory)",
          "privacy": "public",
          "sourceRange": {
            "file": "QuestionElement.js",
            "start": {
              "line": 1102,
              "column": 2
            },
            "end": {
              "line": 1118,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "QuestionElement"
        },
        {
          "name": "haxactiveElementChanged",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "QuestionElement.js",
            "start": {
              "line": 1120,
              "column": 2
            },
            "end": {
              "line": 1124,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "element"
            },
            {
              "name": "value"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "QuestionElement"
        },
        {
          "name": "haxeditModeChanged",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "QuestionElement.js",
            "start": {
              "line": 1126,
              "column": 2
            },
            "end": {
              "line": 1128,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "QuestionElement"
        },
        {
          "name": "renderEditModeFeedbackAreas",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "QuestionElement.js",
            "start": {
              "line": 1130,
              "column": 2
            },
            "end": {
              "line": 1151,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "QuestionElement"
        },
        {
          "name": "haxHooks",
          "description": "Implements haxHooks to tie into life-cycle if hax exists.",
          "privacy": "public",
          "sourceRange": {
            "file": "QuestionElement.js",
            "start": {
              "line": 1156,
              "column": 2
            },
            "end": {
              "line": 1164,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "QuestionElement"
        },
        {
          "name": "haxinlineContextMenu",
          "description": "add buttons when it is in context",
          "privacy": "public",
          "sourceRange": {
            "file": "QuestionElement.js",
            "start": {
              "line": 1169,
              "column": 2
            },
            "end": {
              "line": 1177,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "ceMenu"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "QuestionElement"
        },
        {
          "name": "haxToggleEdit",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "QuestionElement.js",
            "start": {
              "line": 1178,
              "column": 2
            },
            "end": {
              "line": 1181,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "inheritedFrom": "QuestionElement"
        },
        {
          "name": "valueUpdate",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 82,
              "column": 2
            },
            "end": {
              "line": 84,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/index.html",
          "description": ""
        },
        {
          "url": "demo/index.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 8,
          "column": 0
        },
        "end": {
          "line": 100,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "QuestionElement",
      "name": "ShortAnswerQuestion"
    }
  ]
}
